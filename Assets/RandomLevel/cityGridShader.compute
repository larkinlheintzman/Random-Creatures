// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main


struct Agent {
  float heading;
  float2 position;
  float cooldown;
  float cooldownCounter;
};

struct AgentSettings {
  float moveSpeed;
  float turnSpeed;
  float sensingAngle;
  float sensingDist;
  float senseWeight;
  float senseSize;
  float turnCooldown;
  float turnRandomStrength;
  float turnRandomChance;
  float headingIncrement;
};

RWTexture2D<float4> Output;
RWStructuredBuffer<Agent> Agents;
StructuredBuffer<AgentSettings> agentSettings;

float Resolution;
float Time;
float DeltaTime;
float4 WallColor;
float4 SpaceColor;
float NumAgents;
float TrailWeight;
float HeadingAttractionSpeed;
float SenseThreshold;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
float hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state / 4294967295.0;
    // return state;
}

float sense(Agent agent, float angleOffset)
{
  float sum = 0.0;
  float2 direction = float2(cos(agent.heading + angleOffset), sin(agent.heading + angleOffset));
  float2 offsetCenter = agent.position + direction*agentSettings[0].sensingDist;
  // gather all sensory data from specified offset per agent (to be called 3 times probs)

  float senseWeight = agentSettings[0].senseWeight;
  float senseDiameter = agentSettings[0].senseSize;
  for (int xOffset = -int(senseDiameter/2.0); xOffset < int(senseDiameter/2.0); xOffset++) {
    for (int yOffset = -int(senseDiameter/2.0); yOffset < int(senseDiameter/2.0); yOffset++) {
      int2 newSample = int2(int(offsetCenter.x), int(offsetCenter.y)) + int2(xOffset, yOffset);

      float4 origOutput = Output[newSample.xy];
      float newVal = senseWeight*origOutput.x + senseWeight*origOutput.y + senseWeight*origOutput.z + senseWeight*origOutput.w;
      if (newVal <= SenseThreshold)
      {
        sum += newVal;
      }
      else
      {
        sum -= newVal; // run AWAY
      }
    }
  }

  return sum;
}
//
// float scaleNoise01(uint state)
// {
//     ;
// }

[numthreads(8,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{

  if (id.x >= (uint)NumAgents) { return; }

  Agent agent = Agents[id.x];
  float random = hash(id.y * Resolution + id.x + hash((uint)Time));

  float turnSpeed = agentSettings[0].turnSpeed; // hard coded for now

  float weightForward = sense(agent, 0.0);
  float weightRight = sense(agent, agentSettings[0].sensingAngle);
  float weightLeft = sense(agent, -agentSettings[0].sensingAngle);

  // handle heading tweaks

  // only allowed to turn when off cooldown
  if (agent.cooldownCounter <= 0.0)
  {

    // float randomTurnContribution = agentSettings[0].turnRandomStrength*random;
    // // chance to ignore sensing entirely and make a turn
    // float randomChanceVal = hash((uint)random + hash((uint)Time));
    // if (randomChanceVal > agentSettings[0].turnRandomChance)
    // {
    //   randomTurnContribution = 0.0f;
    // }
    // goin' ferd
    if (weightForward > weightLeft && weightForward > weightRight)
    {
      agent.heading += 0;
    }
    else if (weightForward < weightLeft && weightForward < weightRight)
    {
      agent.heading -= 2*(agentSettings[0].turnRandomStrength*random + 1)*turnSpeed*DeltaTime;
      // agent.heading -= 2*turnSpeed*DeltaTime + randomTurnContribution;
      agent.cooldownCounter = agentSettings[0].turnCooldown;
    }
    else if (weightRight > weightLeft)
    {
      agent.heading += (agentSettings[0].turnRandomStrength*random + 1)*turnSpeed*DeltaTime;
      // agent.heading += turnSpeed*DeltaTime + randomTurnContribution;
      agent.cooldownCounter = agentSettings[0].turnCooldown;
    }
    else if (weightRight < weightLeft)
    {
      agent.heading -= (agentSettings[0].turnRandomStrength*random + 1)*turnSpeed*DeltaTime;
      // agent.heading -= turnSpeed*DeltaTime + randomTurnContribution;
      agent.cooldownCounter = agentSettings[0].turnCooldown;
    }
  }
  else
  {
    agent.cooldownCounter -= DeltaTime;
    if (agent.cooldownCounter <= 0.0)
    {
      agent.cooldownCounter = 0.0;
    }
    // agent.cooldownCounter = 0.0;
  }

  float targetHeading = agentSettings[0].headingIncrement*(float)round(agent.heading/agentSettings[0].headingIncrement);
  agent.heading = lerp(agent.heading, targetHeading, HeadingAttractionSpeed);

  // agent.heading = agentSettings[0].headingIncrement*(float)round(agent.heading/agentSettings[0].headingIncrement);
  // agent.heading =

  float2 direction = float2(cos(agent.heading), sin(agent.heading));
  float2 newPos = agent.position + direction*agentSettings[0].moveSpeed*DeltaTime;

  // steer away from edges?
  float buffer = 30;

  // Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= Resolution-1 || newPos.y < 0 || newPos.y >= Resolution-1) {
		// random = hash(random);
		float randomAngle = random * 2 * 3.1415;

		newPos.x = min(Resolution-1,max(0, newPos.x));
		newPos.y = min(Resolution-1,max(0, newPos.y));
		agent.heading = randomAngle;
	}
	else {
    int2 newSample = int2(newPos.x, newPos.y);
    float4 oldOutput = Output[newSample];
    float4 newOutput = max(min(1, oldOutput + TrailWeight*DeltaTime), 0);
    Output[newSample] = newOutput;

	}

  agent.position = newPos;
  Agents[id.x] = agent;

	// agent.position = newPos;
  // Output[id.xy] = float4(unifRandom,unifRandom,unifRandom,1.0f);

}


#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture2D<float4> DiffusedOutput;
// RWTexture2D<float4> Output;

[numthreads(8,8,1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
	// if (id.x < 0 || id.x >= (uint)Resolution || id.y < 0 || id.y >= (uint)Resolution) {
	// 	return;
	// }

	float4 sum = 0;
	float4 originalCol = DiffusedOutput[id.xy];
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(Resolution-1, max(0, id.x + offsetX));
			int sampleY = min(Resolution-1, max(0, id.y + offsetY));
			sum += DiffusedOutput[int2(sampleX,sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	// float diffuseWeight = saturate(diffuseRate * DeltaTime);
	float diffuseWeight = min(max(diffuseRate * DeltaTime,0),1);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedOutput[id.xy] = blurredCol * saturate(1 - decayRate * DeltaTime);
	DiffusedOutput[id.xy] = blurredCol*min(max(1 - decayRate * DeltaTime, 0), 1);
}


#pragma kernel Rotation

// float Resolution;

RWTexture2D<float4> Input;
RWTexture2D<float4> RotatedOutput;
// RWTexture2D<float4> Output;

[numthreads(8,8,1)]
void Rotation (uint3 id : SV_DispatchThreadID)
{
  int sampleIncrements = 27;
  float sampleDistance = 2;
  float angleIncrement = (3.14159*2.0)/float(sampleIncrements);
  // float angleIncrement = (360.0)/float(sampleIncrements);
  float4 pixelVal = float4(0.0, 0.0, 0.0, 0.0);
  int bestIndex = 0;
  float2 bestDirection = float2(0.0, 0.0);
  // for (int ang = 0; ang <= sampleIncrements; ang++) {
  for (int ang = 0; ang < sampleIncrements; ang++)
  {
    float2 direction = float2(sampleDistance*cos(angleIncrement*float(ang)), sampleDistance*sin(angleIncrement*float(ang)));
    // figure out if we're outside bounds of texture
    int2 newPos = int2(id.x + int(direction.x), id.y + int(direction.y));
    if (newPos.x < 0 || newPos.x >= Resolution-1 || newPos.y < 0 || newPos.y >= Resolution-1) {
      return; // skippy
    }

    float4 tempPixelVal = Input[newPos]; // hoping for clamped here
    if (tempPixelVal.x + tempPixelVal.y + tempPixelVal.z + tempPixelVal.w >
        pixelVal.x + pixelVal.y + pixelVal.z + pixelVal.w)
    {
      pixelVal = tempPixelVal;
      bestIndex = ang;
      bestDirection = direction;
    }
  }
  // RotatedOutput[id.xy] = float4(bestDirection.x/sampleDistance, bestDirection.y/sampleDistance, 0.0, 1.0);
  RotatedOutput[id.xy] = float4((float(bestIndex)*angleIncrement)/(3.14159*2.0), 0.0, 0.0, 1.0);
}
